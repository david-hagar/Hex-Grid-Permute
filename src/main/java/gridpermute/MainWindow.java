/*
 * MainWindow.java
 *
 * Created on May 29, 2006, 12:32 PM
 */

package gridpermute;

import gridpermute.GridSet.Settings;

import javax.swing.*;
import java.awt.*;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.PrinterJob;

/**
 * @author David Hagar
 */
public class MainWindow extends javax.swing.JFrame {

    private GridSet gridSet;
    private GridView gridView;


    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();


    }


    public MainWindow(GridSet gridSet) {
        this.gridSet = gridSet;
        initComponents();

        gridView = new GridView(Startup.gridSet);
        rootPanel.add(gridView, BorderLayout.CENTER);
        loadSettings();

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        frameSize.height = screenSize.height - 50;
        frameSize.width = frameSize.height + 200;
        this.setSize(frameSize);

        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        levelTextField = new javax.swing.JTextField();
        plusButton = new javax.swing.JButton();
        minusButton = new javax.swing.JButton();
        enableBorderCheckBox = new javax.swing.JCheckBox();
        lastLevelCheckBox = new javax.swing.JCheckBox();
        showNumberCheckBox = new javax.swing.JCheckBox();
        sortCheckBox = new javax.swing.JCheckBox();
        updateButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        printMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hex Grid Permute");

        rootPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(rootPanel, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        jLabel1.setText("Level");
        jPanel4.add(jLabel1);

        levelTextField.setText("2");
        levelTextField.setPreferredSize(new java.awt.Dimension(35, 20));
        jPanel4.add(levelTextField);

        plusButton.setText("+");
        plusButton.setMargin(new java.awt.Insets(0, 3, 0, 1));
        plusButton.setPreferredSize(new java.awt.Dimension(30, 30));
        plusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusButtonActionPerformed(evt);
            }
        });
        jPanel4.add(plusButton);

        minusButton.setText("-");
        minusButton.setMargin(new java.awt.Insets(0, 5, 0, 3));
        minusButton.setPreferredSize(new java.awt.Dimension(30, 30));
        minusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusButtonActionPerformed(evt);
            }
        });
        jPanel4.add(minusButton);

        jPanel2.add(jPanel4);

        enableBorderCheckBox.setText("Enable Border");
        enableBorderCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        enableBorderCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel2.add(enableBorderCheckBox);

        lastLevelCheckBox.setText("Last Level Only");
        lastLevelCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        lastLevelCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel2.add(lastLevelCheckBox);

        showNumberCheckBox.setText("Show Number");
        showNumberCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        showNumberCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel2.add(showNumberCheckBox);

        sortCheckBox.setText("Sort");
        sortCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        sortCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel2.add(sortCheckBox);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel2.add(updateButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);
        jPanel1.add(jSeparator1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jMenu2.setText("Grid");

        printMenuItem.setLabel("Print ...");
        printMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(printMenuItem);

        exitMenuItem.setLabel("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(exitMenuItem);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        setSize(new java.awt.Dimension(776, 738));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void minusButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_minusButtonActionPerformed
    {// GEN-HEADEREND:event_minusButtonActionPerformed
        levelTextField.setText(Integer.toString(Integer.parseInt(levelTextField
                .getText()) - 1));
    }// GEN-LAST:event_minusButtonActionPerformed


    private void plusButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_plusButtonActionPerformed
    {// GEN-HEADEREND:event_plusButtonActionPerformed
        levelTextField.setText(Integer.toString(Integer.parseInt(levelTextField
                .getText()) + 1));

    }// GEN-LAST:event_plusButtonActionPerformed


    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_updateButtonActionPerformed
    {// GEN-HEADEREND:event_updateButtonActionPerformed
        saveSettings();
        gridSet.rebuild();
        gridView.repaint();
    }// GEN-LAST:event_updateButtonActionPerformed


    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_exitMenuItemActionPerformed
    {// GEN-HEADEREND:event_exitMenuItemActionPerformed
        System.exit(0);
    }// GEN-LAST:event_exitMenuItemActionPerformed


    private void printMenuItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_printMenuItemActionPerformed
    {// GEN-HEADEREND:event_printMenuItemActionPerformed

        print();


    }// GEN-LAST:event_printMenuItemActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox enableBorderCheckBox;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox lastLevelCheckBox;
    private javax.swing.JTextField levelTextField;
    private javax.swing.JButton minusButton;
    private javax.swing.JButton plusButton;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JPanel rootPanel;
    private javax.swing.JCheckBox showNumberCheckBox;
    private javax.swing.JCheckBox sortCheckBox;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables


    private void saveSettings() {
        Settings s = gridSet.settings;

        s.level = Integer.parseInt(levelTextField.getText());
        s.enableBorder = enableBorderCheckBox.isSelected();
        s.lastOnly = lastLevelCheckBox.isSelected();
        s.showNumber = showNumberCheckBox.isSelected();
        s.sort = sortCheckBox.isSelected();
    }


    private void loadSettings() {
        Settings s = gridSet.settings;

        levelTextField.setText(Integer.toString(s.level));
        enableBorderCheckBox.setSelected(s.enableBorder);
        lastLevelCheckBox.setSelected(s.lastOnly);
        showNumberCheckBox.setSelected(s.showNumber);
        sortCheckBox.setSelected(s.sort);
    }


    private void showException(String message, Throwable ex) {

    }


    private void print() {

        try {
            PrinterJob printJob = PrinterJob.getPrinterJob();

            boolean pDialogState = printJob.printDialog();
            Book book = new Book();


            PageFormat pageFormat = printJob.pageDialog(printJob.defaultPage());
            //PageFormat pageFormat = printJob.defaultPage();

            //Paper paper = new Paper();
            //Paper paper = pageFormat.getPaper();
            //paper.setImageableArea(0.0, 0.0, 8 * 72, 10.3 * 72);

            //pageFormat.setPaper(paper);

            book.append(gridView, pageFormat);

//			if (pageFormat.getOrientation() == PageFormat.LANDSCAPE)
//				System.out.println("pageFormat.LANDSCAPE");
//			if (pageFormat.getOrientation() == PageFormat.PORTRAIT)
//				System.out.println("pageFormat.PORTRAIT");

            printJob.setPageable(book);
            printJob.setJobName("Hex Grid Permute");

            if (pDialogState)
                printJob.print();

        } catch (java.security.AccessControlException ace) {
            String errmsg = "Applet access control exception; to allow "
                    + "access to printer, run policytool and set\n"
                    + "permission for \"queuePrintJob\" in " + "RuntimePermission.";
            JOptionPane.showMessageDialog(this, errmsg, "Printer Access Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            showException("Error while printing", ex);
        }


    }


}
